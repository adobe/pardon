import{m as w,h as y}from"./execution-hook-BoAbYzcm.DlAui30b.js";import{c as f,u as T}from"./web.Di1l7vN_.js";import"./index.BDwdYHGq.js";import{P as R}from"./trial-DPXB9fCI.Dj3pK0Vu.js";import{i as S}from"./schema-utils-qbCEesrZ.D4WS2fP6.js";function b(n){function a(s,u){return{re:new RegExp(`^${s.replaceAll(/::([a-z]*)/g,"(?<$1>.+)").replaceAll(/:([a-z]*)/g,"(?<$1>[^/]+)")}/?$`),action:u}}return async s=>{const u=Object.entries(n).map(([i,t])=>a(i,t));try{for(const i of u){const t=i.re.exec(`${s.method} ${s.url}`);if(t)return await i.action({req:s,slug:t.groups??{}})}}catch(i){return console.warn(`mini-router: ${s.method} ${s.url}: error`,i),new Response("error",{status:500})}}}const x=({todos:n,setTodos:a,users:s,setUsers:u,generateTodoId:i})=>b({"GET /health-check"(){return new Response("ok")},"PUT /users"({req:t}){const{username:e,password:o}=m(t);return s()[e]===o?h({token:`jwt.${btoa(JSON.stringify({username:e}))}`}):new Response("wrong username or password",{status:401})},"PUT /todos/:todo"({req:t,slug:{todo:e}}){const{username:o}=p(t);let r=m(t);return a(({[o]:c,...d})=>{if(!c[e])throw new Error("todo not found");return r={...c[e],...r},{[o]:{...c,[e]:r},...d}}),h({id:e,...r})},"POST /users"({req:t}){const{username:e,password:o}=m(t),{username:r}=p(t)??{};return u(({[e]:c,...d})=>{if(c&&r!==e)throw new Error("cannot update existing user");return{...d,[e]:o}}),new Response("ok")},"POST /todos"({req:t}){const{username:e}=p(t);if(!(e in s()))throw new Error("user not registered");const o=i(),r={done:!1,...m(t)};return a(({[e]:c,...d})=>({[e]:{...c,[o]:r},...d})),h({id:o,...r})},"GET /todos/:todo"({req:t,slug:{todo:e}}){const{username:o}=p(t),r=(n()[o]??{})[e];return r?h({id:e,...r}):new Response("not found",{status:404})},"GET /todos"({req:t}){const{username:e}=p(t);return h(Object.entries(n()[e]??{}).map(([o,r])=>({id:o,...r})))},"DELETE /users"({req:t}){const{username:e}=p(t);return e?s()[e]?(u(({[e]:o,...r})=>r),a(({[e]:o,...r})=>r),new Response(null,{status:204})):new Response("not found",{status:404}):new Response("unauthorized",{status:401})},"DELETE /todos/:todo"({req:t,slug:{todo:e}}){const{username:o}=p(t);if(!n()[o]?.[e])return new Response(null,{status:404});let r;return a(({[o]:c,...d})=>{if(!c[e])throw new Error("todo not found");return{[e]:r,...c}=c,{[o]:c,...d}}),h({id:e,...r})}});function m(n){if(n.headers.get("content-type")!=="application/json")throw new Error("missing content type");return JSON.parse(String(n.body))}function p(n){const a=n.headers.get("authorization");if(!a)return;const[s,u]=a.split(".");if(!/^User\s+jwt/i.test(s.trimStart()))throw new Error("invalid auth");return JSON.parse(atob(u))}function h(n,{status:a=200,headers:s={}}={}){return new Response(JSON.stringify(n),{status:a,headers:{"Content-Type":"application/json",...s}})}const[,l]=w(f(1e3),{name:"todo-id"}),[O,g]=w(f({}),{name:"todos"}),[$,E]=w(f({}),{name:"users"});function A(){T(()=>{l(1e3),E({}),g({})})}function k(){return`T${l(n=>n+1)}`}const D=y(R,{async fetch({egress:{request:n}}){const[a,s]=S(n);try{const u=await j(a,s),{status:i,statusText:t,headers:e}=u;return{status:i,statusText:t,headers:e,body:await u.text()}}catch(u){return{status:500,headers:new Headers,body:String(u)}}}}),P=x({users:$,setUsers:E,todos:O,setTodos:g,generateTodoId:k});async function j(n,a){return await P({url:n.pathname+n.search,method:a.method??"GET",body:a.body,headers:new Headers(a.headers)})??new Response(null,{status:404})}export{D as T,A as r,O as t,$ as u};
